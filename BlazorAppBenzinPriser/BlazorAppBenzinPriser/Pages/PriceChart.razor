@page "/price-chart"
@using Blazorise.Charts
@inject HttpClient Http

<LineChart @ref="lineChart" TItem="double?" />

@if (data != null && data.Count > 0)
{
    <p>Data Loaded Successfully</p>
}
else
{
    <p>Loading data...</p>
}

@code {
    private LineChart<double?> lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private List<string> labels = new List<string>();
    private List<double?> data = new List<double?>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("Fetching data from API...");
            var priceData = await Http.GetFromJsonAsync<List<PriceData>>("https://magsapi.onrender.com/api/miles95");

            if (priceData != null)
            {
                Console.WriteLine($"Fetched {priceData.Count} records.");
                labels = priceData.Select(x => x.Date.ToShortDateString()).ToList();
                data = priceData.Select(x => (double?)x.Price).ToList();
            }
            else
            {
                Console.WriteLine("No data fetched from API.");
            }

            lineChartOptions = new LineChartOptions
                {
                    Responsive = true,
                    Scales = new ChartScales
                    {
                        X = new ChartAxis
                        {
                            Title = new() { Text = "Date", Display = true }
                        },
                        Y = new ChartAxis
                        {
                            Title = new() { Text = "Price", Display = true }
                        }
                    },
                    Plugins = new ChartPlugins
                    {
                        Legend = new ChartLegend { Display = true },
                        Title = new ChartTitle { Text = "Price over Time", Display = true }
                    }
                };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeChart();
        }
    }

    private async Task InitializeChart()
    {
        if (lineChart != null)
        {
            await lineChart.Clear();

            await lineChart.AddDataSet(new LineChartDataset<double?>
                {
                    Label = "Price",
                    Data = data,
                    BackgroundColor = new[] { "#4bc0c0" },
                    BorderColor = new[] { "#4bc0c0" },
                    BorderWidth = 2,
                    PointHoverBorderWidth = 4,
                });

            await lineChart.AddLabels(labels.ToArray());

            await lineChart.Update();
        }
    }

    public class PriceData
    {
        public DateTime Date { get; set; }
        public decimal Price { get; set; }
    }
}

